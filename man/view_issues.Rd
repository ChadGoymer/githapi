% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/issues.R
\name{view_issues}
\alias{view_issues}
\alias{view_issue}
\alias{browse_issue}
\title{View issues within a repository or organization}
\usage{
view_issues(
  repo,
  org,
  labels,
  milestone,
  since,
  state = "open",
  sort = "created",
  direction = "desc",
  n_max = 1000,
  ...
)

view_issue(issue, repo, ...)

browse_issue(issue, repo, ...)
}
\arguments{
\item{repo}{(string, optional) The repository specified in the format:
\code{owner/repo}.}

\item{org}{(string, optional) The name of the organization.}

\item{labels}{(character, optional) Label names to filter by.}

\item{milestone}{(string or integer) Milestone number or title to filter by.}

\item{since}{(string, optional) A date & time to filter by. Must be in the
format: \verb{YYYY-MM-DD HH:MM:SS}.}

\item{state}{(string, optional) The state of the issues to return. Can be
either \code{"open"}, \code{"closed"}, or \code{"all"}. Default: \code{"open"}.}

\item{sort}{(string, optional) The property to order the returned issues by.
Can be either \code{"created"}, \code{"updated"}, or \code{"comments"}. Default:
\code{"created"}.}

\item{direction}{(string, optional) The direction of the sort. Can be either
\code{"asc"} or \code{"desc"}. Default: \code{"desc"}.}

\item{n_max}{(integer, optional) Maximum number to return. Default: \code{1000}.}

\item{...}{Parameters passed to \code{\link[=gh_page]{gh_page()}} or \code{\link[=gh_request]{gh_request()}}.}

\item{issue}{(string or character) The number or title of the issue.}
}
\value{
\code{view_issues()} returns a tibble of issue properties. \code{view_issue()}
returns a list of properties for a single issue. \code{browse_issue()} opens the
default browser on the issue's page and returns the URL.

\strong{Issue Properties:}
\itemize{
\item \strong{number}: The number assigned to the issue.
\item \strong{title}: The title of the issue.
\item \strong{body}: The body contents of the issue.
\item \strong{assignees}: The users assigned to the issue.
\item \strong{labels}: The labels attached to the issue.
\item \strong{milestone}: The milestone assigned to the issue.
\item \strong{state}: The state of the issue - either \code{"open"} or \code{"closed"}.
\item \strong{repository}: The repository the issue is in.
\item \strong{pull_request}: Whether the issue is a pull request.
\item \strong{html_url}: The URL of the issue's web page in GitHub.
\item \strong{creator}: The creator's login.
\item \strong{created_at}: When the issue was created.
\item \strong{updated_at}: When the issue was last updated.
\item \strong{closed_at}: When the issue was closed.
}
}
\description{
\code{view_issues()} summarises issues in a table with the properties as columns
and a row for each issue in the repository or organization. \code{view_issue()}
returns a list of all properties for a single issue. \code{browse_issue()} opens
the web page for the issue in the default browser.
}
\details{
You can summarise all the issues in a repository or organization by
specifying the arguments. If neither are specified then all the issues
assigned to the authenticated user are returned. You can filter the issues
based on the labels, milestone, whether they have been updated since a
specified date or whether they are \code{"open"} or \code{"closed"}. Finally, the order
the results are returned can be controlled with \code{sort} and \code{direction}.

For more details see the GitHub API documentation:
\itemize{
\item \url{https://docs.github.com/en/free-pro-team@latest/rest/reference/issues#list-issues-assigned-to-the-authenticated-user}
\item \url{https://docs.github.com/en/free-pro-team@latest/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user}
\item \url{https://docs.github.com/en/free-pro-team@latest/rest/reference/issues#list-repository-issues}
\item \url{https://docs.github.com/en/free-pro-team@latest/rest/reference/issues#get-an-issue}
}
}
\examples{
\dontrun{

  # View open issues in a repository
  view_issues("ChadGoymer/githapi")

  # View closed issues in a repository
  view_issues("ChadGoymer/githapi", state = "closed")

  # View a single issue
  view_issue("test issue", "ChadGoymer/githapi")

  # Open a issue's page in a browser
  browse_issue("test issue", "ChadGoymer/githapi")

}

}
