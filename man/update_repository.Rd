% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/repositories.R
\name{update_repository}
\alias{update_repository}
\title{Update a user or organization repository}
\usage{
update_repository(
  repo,
  name,
  description,
  homepage,
  private,
  has_issues,
  has_projects,
  has_wiki,
  default_branch,
  allow_squash_merge,
  allow_merge_commit,
  allow_rebase_merge,
  delete_branch_on_merge,
  archived,
  team,
  permission = "pull",
  ...
)
}
\arguments{
\item{repo}{(string) The repository specified in the format: \code{owner/repo}.}

\item{name}{(string, optional) The name of the repository.}

\item{description}{(string, optional) A short description of the repository.}

\item{homepage}{(string, optional) A URL with more information about the repository.}

\item{private}{(boolean, optional) Whether the repository is private or public.}

\item{has_issues}{(boolean, optional) Whether to enable issues for the repository.}

\item{has_projects}{(boolean, optional) Whether to enable projects for the repository.}

\item{has_wiki}{(boolean, optional) Whether to enable the wiki for the repository.}

\item{default_branch}{(string, optional) The name of the default branch.}

\item{allow_squash_merge}{(boolean, optional) Whether to allow squash-merging pull requests.}

\item{allow_merge_commit}{(boolean, optional) Whether to allow merging pull requests with a
merge commit.}

\item{allow_rebase_merge}{(boolean, optional) Whether to allow rebase-merging pull requests.}

\item{delete_branch_on_merge}{(boolean, optional) Whether to allow automatically deleting
branches when pull requests are merged.}

\item{archived}{(boolean, optional) Whether to archive the repository.}

\item{team}{(string) The team name.}

\item{permission}{(string, optional) The permission to set for the team. Either: \verb{"pull"``, }"push"\verb{, }"admin"\verb{, }"maintain"\code{or}"triage"\verb{. Default: }"pull"`.}

\item{...}{Parameters passed to \code{\link[=gh_request]{gh_request()}}.}
}
\value{
\code{update_repository()} returns a list of the repository properties.

\strong{Repository Properties:}
\itemize{
\item \strong{id}: The ID of the repository.
\item \strong{name}: The name of the repository.
\item \strong{full_name}: The full name of the repository, in the format: \code{owner/repo}.
\item \strong{description}: The description of the repository.
\item \strong{owner}: The owner of the repository.
\item \strong{html_url}: The address of the repository's web page in GitHub.
\item \strong{homepage}: The homepage for the repository.
\item \strong{language}: The dominant programming language in the repository.
\item \strong{size}: The overall size of the repository in bytes.
\item \strong{default_branch}: The name of the default branch.
\item \strong{permission}: The permission the authenticated user has.
\item \strong{private}: Whether the repository is private.
\item \strong{has_issues}: Whether the repository has issues.
\item \strong{has_projects}: Whether the repository has projects.
\item \strong{has_wiki}: Whether the repository has a wiki.
\item \strong{has_pages}: Whether the repository has GitHub Pages.
\item \strong{has_downloads}: Whether the repository has downloads.
\item \strong{allow_squash_merge}: Whether the repository allows squash-merging pull requests.
\item \strong{allow_merge_commit}: Whether the repository allows merging pull requests with a merge
commit.
\item \strong{allow_rebase_merge}: Whether the repository allows rebase-merging pull requests.
\item \strong{fork}: Whether the repository is a fork of another.
\item \strong{archived}: Whether the repository has been archived.
\item \strong{disabled}: Whether the repository has been disabled.
\item \strong{pushed_at}: When the repository was last pushed to.
\item \strong{created_at}: When the repository was created.
\item \strong{updated_at}: When the repository was last updated.
}
}
\description{
This function updates a repository for the specified user or organization in GitHub. It can
be used to change whether the project is private or has issues, projects or a wiki, it can
redefine the allowed behaviour when merging pull requests or add or update team
permissions.
}
\details{
The team's permission can be set to:
\itemize{
\item \code{"pull"}: Team members can pull from this repository.
\item \code{"push"}: Team members can pull from and push to this repository.
\item \code{"admin"}: Team members can pull from, push to and administer this repository.
\item \code{"maintain"}: Team members can manage the repository without access to sensitive or
destructive actions. Recommended for project managers. Only applies to repositories
owned by organizations.
\item \code{"triage"}: Team members can proactively manage issues and pull requests without write
access. Recommended for contributors who triage a repository. Only applies to
repositories owned by organizations.
}

For more details see the GitHub API documentation:
\itemize{
\item \url{https://developer.github.com/v3/repos/#edit}
\item \url{https://developer.github.com/v3/teams/#add-or-update-team-repository-permissions}
}
}
\examples{
\dontrun{

  # Update a repository
  update_repository(
    repo           = "ChadGoymer/user-repository",
    name           = "updated-user-repository",
    description    = "This is an updated user repository",
    homepage       = "https://updated-user-repository.com",
    has_issues     = FALSE,
    has_projects   = FALSE,
    has_wiki       = FALSE,
    default_branch = "main")

  # Update an organization's repository
  update_repository(
    repo                   = "HairyCoos/org-repository",
    name                   = "updated-org-repository",
    description            = "This is an updated organization repository",
    homepage               = "https://updated-org-repository.com",
    private                = FALSE,
    allow_squash_merge     = FALSE,
    allow_merge_commit     = FALSE,
    allow_rebase_merge     = TRUE,
    delete_branch_on_merge = TRUE)

  # Archive a repository
  update_repository("HairyCoos/org-repository", archived = TRUE)

  # Add read access for the specified team
  update_repository(
    repo = "HairyCoos/test-repository",
    team = "test-team")

  # Update team's permission to "maintain"
  update_repository(
    repo       = "HairyCoos/test-repository",
    team       = "test-team",
    permission = "maintain")

}

}
